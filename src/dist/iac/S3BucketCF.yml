---
AWSTemplateFormatVersion: '2010-09-09'
Description: Bucket S3 para la página Web

Resources:
  
  S3Bucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: sumardiashabilesconfestivos
      AccessControl: PublicRead
      WebsiteConfiguration:
        IndexDocument: index.html
    DeletionPolicy: Delete
  
  CleanupBucketOnDelete:
    Type: Custom::cleanupbucket
    Properties:
      ServiceToken: 
        Fn::GetAtt: 
          - CleanBucketOnDeleteLambda
          - Arn
      BucketName: sumardiashabilesconfestivos
  
  BucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: PublicReadForGetBucketObjects
            Effect: Allow
            Principal: "*"
            Action: s3:GetObject
            Resource:
              Fn::Join:
              - ''
              - - 'arn:aws:s3:::'
                - Ref: S3Bucket
                - '/*'
      Bucket: 
        Ref: S3Bucket
  
  CleanBucketOnDeleteLambda: 
    Type: "AWS::Lambda::Function"
    Properties: 
      FunctionName: CleanBucketOnDelete
      Handler: index.lambda_handler
      Description: Vacía un bucket previo a su eliminación
      Role: 
        Fn::ImportValue: ArnIamRole
      Code: 
        ZipFile: |

          import json
          import boto3
          from botocore.vendored import requests

          def lambda_handler(event, context):
            try:
              bucket = event['ResourceProperties']['BucketName']
              if event['RequestType'] == 'Delete':
                s3 = boto3.resource('s3')
                bucket = s3.Bucket(bucket)
                for obj in bucket.objects.filter():
                  s3.Object(bucket.name, obj.key).delete()
              sendResponseCfn(event, context, "SUCCESS")
            except Exception as e:
              print(e)
              sendResponseCfn(event, context, "FAILED")

          def sendResponseCfn(event, context, responseStatus):
            response_body = {
                     'Status': responseStatus,
                     'Reason': 'Log stream name: ' + context.log_stream_name,
                     'PhysicalResourceId': context.log_stream_name,
                     'StackId': event['StackId'],
                     'RequestId': event['RequestId'],
                     'LogicalResourceId': event['LogicalResourceId'],
                     'Data': json.loads("{}")
            }
            requests.put(event['ResponseURL'], data=json.dumps(response_body))

      Runtime: "python3.6"
      MemorySize: 128
      Timeout: 30
      TracingConfig:
        Mode: "PassThrough"


Outputs:
  WebsiteURL:
    Value: 
        Fn::GetAtt:
        - S3Bucket
        - WebsiteURL
    Description: URL para el sitio web alojado en S3
